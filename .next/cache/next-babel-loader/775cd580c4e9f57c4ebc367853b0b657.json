{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"isomorphic-unfetch\";\nvar API_URL = \"https://graphql.datocms.com\";\nvar API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN; // See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\n\nvar RESPONSIVE_IMAGE_FRAGMENT = \"\\n  height\\n  sizes\\n  src\\n  srcSet\\n  width\\n  alt\\n  title\\n\";\nvar META_TAGS_FRAGMENT = \"\\n  attributes\\n  content\\n  tag\\n\";\n\nfunction fetchAPI(query) {\n  var _ref,\n      variables,\n      preview,\n      res,\n      json,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function fetchAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables, preview = _ref.preview;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(API_URL + (preview ? \"/preview\" : \"\"), {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \".concat(API_TOKEN)\n            },\n            body: JSON.stringify({\n              query: query,\n              variables: variables\n            })\n          }));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n\n          if (!json.errors) {\n            _context.next = 10;\n            break;\n          }\n\n          console.error(json.errors);\n          throw new Error(\"Failed to fetch API\");\n\n        case 10:\n          return _context.abrupt(\"return\", json.data);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function getPostDataById(id) {\n  var query, data;\n  return _regeneratorRuntime.async(function getPostDataById$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = \"\\n    query PostById($id: ItemId) {\\n      article(filter: {id: {eq: $id}}) {\\n        createdAt\\n        content {\\n          ... on PostRecord {\\n            id\\n            title\\n            slug\\n            author\\n            postContent(markdown: true)\\n            excerpt\\n            tableOfContents\\n            createdAt\\n            coverImage {\\n              responsiveImage(imgixParams: { fit: crop, ar: \\\"16:9\\\", w: 750 }) {\\n                \".concat(RESPONSIVE_IMAGE_FRAGMENT, \"\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetchAPI(query, {\n            variables: {\n              id: id\n            }\n          }));\n\n        case 3:\n          data = _context2.sent;\n          console.log(\"D\", data);\n          return _context2.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.article);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAllPostsWithId() {\n  var data;\n  return _regeneratorRuntime.async(function getAllPostsWithId$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetchAPI(\"\\n    {\\n      allArticles {\\n        content {\\n          id\\n        }\\n      }\\n    }\\n  \"));\n\n        case 2:\n          data = _context3.sent;\n          return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.allArticles);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAllPostsForHome(preview) {\n  var data;\n  return _regeneratorRuntime.async(function getAllPostsForHome$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(fetchAPI(\"\\n    {\\n      allArticles {\\n        content {\\n          ... on PostRecord {\\n            id\\n            title\\n            slug\\n            author\\n            postContent(markdown: true)\\n            excerpt\\n            tableOfContents\\n            createdAt\\n            coverImage {\\n              responsiveImage(imgixParams: { fit: crop, ar: \\\"16:9\\\", w: 750 }) {\\n                \".concat(RESPONSIVE_IMAGE_FRAGMENT, \"\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \")));\n\n        case 2:\n          data = _context4.sent;\n          return _context4.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.allArticles);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n} // export async function getPostAndMorePosts(slug, preview) {\n//   const data = await fetchAPI(\n//     `\n//   query PostBySlug($slug: String) {\n//     post(filter: {slug: {eq: $slug}}) {\n//       title\n//       slug\n//       content\n//       date\n//       ogImage: coverImage{\n//         url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n//       }\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//     morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n//       title\n//       slug\n//       excerpt\n//       date\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//   }\n//   ${RESPONSIVE_IMAGE_FRAGMENT}\n//   `,\n//     {\n//       preview,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data;\n// }","map":{"version":3,"sources":["/Users/helmutp/Desktop/DEV/playground/personal-blog/lib/api.js"],"names":["API_URL","API_TOKEN","process","env","NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN","RESPONSIVE_IMAGE_FRAGMENT","META_TAGS_FRAGMENT","fetchAPI","query","variables","preview","fetch","method","headers","Authorization","body","JSON","stringify","res","json","errors","console","error","Error","data","getPostDataById","id","log","article","getAllPostsWithId","allArticles","getAllPostsForHome"],"mappings":";AAAA,OAAO,oBAAP;AAEA,IAAMA,OAAO,GAAG,6BAAhB;AACA,IAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,kCAA9B,C,CAEA;;AACA,IAAMC,yBAAyB,oEAA/B;AAUA,IAAMC,kBAAkB,uCAAxB;;AAMA,SAAeC,QAAf,CAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAAwD,EAAxD,EAAiCC,SAAjC,QAAiCA,SAAjC,EAA4CC,OAA5C,QAA4CA,OAA5C;AAAA;AAAA,2CACoBC,KAAK,CAACX,OAAO,IAAIU,OAAO,GAAG,UAAH,GAAgB,EAA3B,CAAR,EAAwC;AAC7DE,YAAAA,MAAM,EAAE,MADqD;AAE7DC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEPC,cAAAA,aAAa,mBAAYb,SAAZ;AAFN,aAFoD;AAM7Dc,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,cAAAA,KAAK,EAALA,KADmB;AAEnBC,cAAAA,SAAS,EAATA;AAFmB,aAAf;AANuD,WAAxC,CADzB;;AAAA;AACQS,UAAAA,GADR;AAAA;AAAA,2CAaqBA,GAAG,CAACC,IAAJ,EAbrB;;AAAA;AAaQA,UAAAA,IAbR;;AAAA,eAcMA,IAAI,CAACC,MAdX;AAAA;AAAA;AAAA;;AAeIC,UAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AAfJ,gBAgBU,IAAIG,KAAJ,CAAU,qBAAV,CAhBV;;AAAA;AAAA,2CAkBSJ,IAAI,CAACK,IAlBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,OAAO,SAAeC,eAAf,CAA+BC,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACClB,UAAAA,KADD,ydAiBWH,yBAjBX;AAAA;AAAA,2CAwBcE,QAAQ,CAACC,KAAD,EAAQ;AACjCC,YAAAA,SAAS,EAAE;AACTiB,cAAAA,EAAE,EAAFA;AADS;AADsB,WAAR,CAxBtB;;AAAA;AAwBCF,UAAAA,IAxBD;AA8BLH,UAAAA,OAAO,CAACM,GAAR,CAAY,GAAZ,EAAiBH,IAAjB;AA9BK,4CAgCEA,IAhCF,aAgCEA,IAhCF,uBAgCEA,IAAI,CAAEI,OAhCR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCP,OAAO,SAAeC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACctB,QAAQ,gGADtB;;AAAA;AACCiB,UAAAA,IADD;AAAA,4CAWEA,IAXF,aAWEA,IAXF,uBAWEA,IAAI,CAAEM,WAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeC,kBAAf,CAAkCrB,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACcH,QAAQ,mZAgBXF,yBAhBW,kFADtB;;AAAA;AACCmB,UAAAA,IADD;AAAA,4CA2BEA,IA3BF,aA2BEA,IA3BF,uBA2BEA,IAAI,CAAEM,WA3BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA8BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import \"isomorphic-unfetch\";\n\nconst API_URL = \"https://graphql.datocms.com\";\nconst API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN;\n\n// See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\nconst RESPONSIVE_IMAGE_FRAGMENT = `\n  height\n  sizes\n  src\n  srcSet\n  width\n  alt\n  title\n`;\n\nconst META_TAGS_FRAGMENT = `\n  attributes\n  content\n  tag\n`;\n\nasync function fetchAPI(query, { variables, preview } = {}) {\n  const res = await fetch(API_URL + (preview ? \"/preview\" : \"\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n  return json.data;\n}\n\nexport async function getPostDataById(id) {\n  const query = `\n    query PostById($id: ItemId) {\n      article(filter: {id: {eq: $id}}) {\n        createdAt\n        content {\n          ... on PostRecord {\n            id\n            title\n            slug\n            author\n            postContent(markdown: true)\n            excerpt\n            tableOfContents\n            createdAt\n            coverImage {\n              responsiveImage(imgixParams: { fit: crop, ar: \"16:9\", w: 750 }) {\n                ${RESPONSIVE_IMAGE_FRAGMENT}\n              }\n            }\n          }\n        }\n      }\n    }`;\n  const data = await fetchAPI(query, {\n    variables: {\n      id\n    }\n  });\n\n  console.log(\"D\", data);\n\n  return data?.article;\n}\n\nexport async function getAllPostsWithId() {\n  const data = await fetchAPI(`\n    {\n      allArticles {\n        content {\n          id\n        }\n      }\n    }\n  `);\n\n  return data?.allArticles;\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    {\n      allArticles {\n        content {\n          ... on PostRecord {\n            id\n            title\n            slug\n            author\n            postContent(markdown: true)\n            excerpt\n            tableOfContents\n            createdAt\n            coverImage {\n              responsiveImage(imgixParams: { fit: crop, ar: \"16:9\", w: 750 }) {\n                ${RESPONSIVE_IMAGE_FRAGMENT}\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n  );\n\n  return data?.allArticles;\n}\n\n// export async function getPostAndMorePosts(slug, preview) {\n//   const data = await fetchAPI(\n//     `\n//   query PostBySlug($slug: String) {\n//     post(filter: {slug: {eq: $slug}}) {\n//       title\n//       slug\n//       content\n//       date\n//       ogImage: coverImage{\n//         url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n//       }\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n\n//     morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n//       title\n//       slug\n//       excerpt\n//       date\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//   }\n\n//   ${RESPONSIVE_IMAGE_FRAGMENT}\n//   `,\n//     {\n//       preview,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data;\n// }\n"]},"metadata":{},"sourceType":"module"}