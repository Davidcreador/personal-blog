{"ast":null,"code":"import \"isomorphic-unfetch\";\nconst API_URL = \"https://graphql.datocms.com\";\nconst API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN; // See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\n\nconst RESPONSIVE_IMAGE_FRAGMENT = `\n  height\n  sizes\n  src\n  srcSet\n  width\n  alt\n  title\n`;\nconst META_TAGS_FRAGMENT = `\n  attributes\n  content\n  tag\n`;\n\nasync function fetchAPI(query, {\n  variables,\n  preview\n} = {}) {\n  const res = await fetch(API_URL + (preview ? \"/preview\" : \"\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n} // export async function getPreviewPostBySlug(slug) {\n//   const data = await fetchAPI(\n//     `\n//     query PostBySlug($slug: String) {\n//       post(filter: {slug: {eq: $slug}}) {\n//         slug\n//       }\n//     }`,\n//     {\n//       preview: true,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data?.post;\n// }\n// export async function getAllPostsWithSlug() {\n//   const data = fetchAPI(`\n//     {\n//       allPosts {\n//         slug\n//       }\n//     }\n//   `);\n//   return data?.allPosts;\n// }\n\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    {\n      allArticles {\n        content {\n          ... on PostRecord {\n            id\n            title\n            slug\n            author\n            postContent(markdown: true)\n            excerpt\n            tableOfContents\n            createdAt\n            coverImage {\n              responsiveImage(imgixParams: { fit: crop, ar: \"16:9\", w: 750 }) {\n                ${RESPONSIVE_IMAGE_FRAGMENT}\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.allArticles;\n} // export async function getPostAndMorePosts(slug, preview) {\n//   const data = await fetchAPI(\n//     `\n//   query PostBySlug($slug: String) {\n//     post(filter: {slug: {eq: $slug}}) {\n//       title\n//       slug\n//       content\n//       date\n//       ogImage: coverImage{\n//         url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n//       }\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//     morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n//       title\n//       slug\n//       excerpt\n//       date\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//   }\n//   ${RESPONSIVE_IMAGE_FRAGMENT}\n//   `,\n//     {\n//       preview,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data;\n// }","map":{"version":3,"sources":["/Users/helmutp/Desktop/DEV/playground/personal-blog/lib/api.js"],"names":["API_URL","API_TOKEN","process","env","NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN","RESPONSIVE_IMAGE_FRAGMENT","META_TAGS_FRAGMENT","fetchAPI","query","variables","preview","res","fetch","method","headers","Authorization","body","JSON","stringify","json","errors","console","error","Error","data","getAllPostsForHome","allArticles"],"mappings":"AAAA,OAAO,oBAAP;AAEA,MAAMA,OAAO,GAAG,6BAAhB;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,kCAA9B,C,CAEA;;AACA,MAAMC,yBAAyB,GAAI;;;;;;;;CAAnC;AASA,MAAMC,kBAAkB,GAAI;;;;CAA5B;;AAMA,eAAeC,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAAxD,EAA4D;AAC1D,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACZ,OAAO,IAAIU,OAAO,GAAG,UAAH,GAAgB,EAA3B,CAAR,EAAwC;AAC7DG,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAG,UAASd,SAAU;AAF5B,KAFoD;AAM7De,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AANuD,GAAxC,CAAvB;AAYA,QAAMU,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,SAAOJ,IAAI,CAACK,IAAZ;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,kBAAf,CAAkCf,OAAlC,EAA2C;AAChD,QAAMc,IAAI,GAAG,MAAMjB,QAAQ,CACxB;;;;;;;;;;;;;;;kBAeaF,yBAA0B;;;;;;;GAhBf,CAA3B;AA0BA,SAAOmB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEE,WAAb;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import \"isomorphic-unfetch\";\n\nconst API_URL = \"https://graphql.datocms.com\";\nconst API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN;\n\n// See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\nconst RESPONSIVE_IMAGE_FRAGMENT = `\n  height\n  sizes\n  src\n  srcSet\n  width\n  alt\n  title\n`;\nconst META_TAGS_FRAGMENT = `\n  attributes\n  content\n  tag\n`;\n\nasync function fetchAPI(query, { variables, preview } = {}) {\n  const res = await fetch(API_URL + (preview ? \"/preview\" : \"\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n  return json.data;\n}\n\n// export async function getPreviewPostBySlug(slug) {\n//   const data = await fetchAPI(\n//     `\n//     query PostBySlug($slug: String) {\n//       post(filter: {slug: {eq: $slug}}) {\n//         slug\n//       }\n//     }`,\n//     {\n//       preview: true,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data?.post;\n// }\n\n// export async function getAllPostsWithSlug() {\n//   const data = fetchAPI(`\n//     {\n//       allPosts {\n//         slug\n//       }\n//     }\n//   `);\n//   return data?.allPosts;\n// }\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    {\n      allArticles {\n        content {\n          ... on PostRecord {\n            id\n            title\n            slug\n            author\n            postContent(markdown: true)\n            excerpt\n            tableOfContents\n            createdAt\n            coverImage {\n              responsiveImage(imgixParams: { fit: crop, ar: \"16:9\", w: 750 }) {\n                ${RESPONSIVE_IMAGE_FRAGMENT}\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n  );\n\n  return data?.allArticles;\n}\n\n// export async function getPostAndMorePosts(slug, preview) {\n//   const data = await fetchAPI(\n//     `\n//   query PostBySlug($slug: String) {\n//     post(filter: {slug: {eq: $slug}}) {\n//       title\n//       slug\n//       content\n//       date\n//       ogImage: coverImage{\n//         url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n//       }\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n\n//     morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n//       title\n//       slug\n//       excerpt\n//       date\n//       coverImage {\n//         responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n//           ...responsiveImageFragment\n//         }\n//       }\n//       author {\n//         name\n//         picture {\n//           url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n//         }\n//       }\n//     }\n//   }\n\n//   ${RESPONSIVE_IMAGE_FRAGMENT}\n//   `,\n//     {\n//       preview,\n//       variables: {\n//         slug\n//       }\n//     }\n//   );\n//   return data;\n// }\n"]},"metadata":{},"sourceType":"module"}