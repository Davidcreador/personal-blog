{"ast":null,"code":"var _jsxFileName = \"/Users/helmutp/Desktop/DEV/workspace/playground/personal-blog/pages/posts/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport readTimeEstimate from \"read-time-estimate\";\nimport Container from \"../../components/container\";\nimport PostBody from \"../../components/post-body\";\nimport MoreStories from \"../../components/more-stories\";\nimport Header from \"../../components/header\";\nimport PostHeader from \"../../components/post-header\";\nimport SectionSeparator from \"../../components/section-separator\";\nimport Layout from \"../../components/layout\";\nimport PostTitle from \"../../components/post-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\nimport markdownToHtml from \"../../lib/markdownToHtml\";\n\nfunction readTime(content) {\n  var _readTimeEstimate = readTimeEstimate(content),\n      humanizedDuration = _readTimeEstimate.humanizedDuration,\n      duration = _readTimeEstimate.duration,\n      totalWords = _readTimeEstimate.totalWords,\n      wordTime = _readTimeEstimate.wordTime;\n\n  return {\n    humanizedDuration: humanizedDuration,\n    duration: duration,\n    totalWords: totalWords,\n    wordTime: wordTime\n  };\n}\n\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  var post = _ref.post;\n  var router = useRouter();\n\n  if (!router.isFallback && !(post === null || post === void 0 ? void 0 : post.slug)) {\n    return __jsx(ErrorPage, {\n      statusCode: 404,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var content = readTime(post.postContent);\n  console.log(content);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), router.isFallback ? __jsx(PostTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, \"Loading\\u2026\") : __jsx(React.Fragment, null, __jsx(\"article\", {\n    className: \"flex flex-col justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, post.title, \" | Next.js Blog Example with \", CMS_NAME)), __jsx(PostHeader, {\n    title: post.title,\n    coverImage: post.coverImage,\n    date: post.createdAt,\n    author: post.author,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }), __jsx(PostBody, {\n    content: post.postContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  })), __jsx(SectionSeparator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/helmutp/Desktop/DEV/workspace/playground/personal-blog/pages/posts/[id].js"],"names":["useRouter","ErrorPage","readTimeEstimate","Container","PostBody","MoreStories","Header","PostHeader","SectionSeparator","Layout","PostTitle","Head","CMS_NAME","markdownToHtml","readTime","content","humanizedDuration","duration","totalWords","wordTime","Post","post","router","isFallback","slug","postContent","console","log","title","coverImage","createdAt","author"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,0BAMrBb,gBAAgB,CAACa,OAAD,CANK;AAAA,MAEvBC,iBAFuB,qBAEvBA,iBAFuB;AAAA,MAGvBC,QAHuB,qBAGvBA,QAHuB;AAAA,MAIvBC,UAJuB,qBAIvBA,UAJuB;AAAA,MAKvBC,QALuB,qBAKvBA,QALuB;;AAQzB,SAAO;AACLH,IAAAA,iBAAiB,EAAjBA,iBADK;AAELC,IAAAA,QAAQ,EAARA,QAFK;AAGLC,IAAAA,UAAU,EAAVA,UAHK;AAILC,IAAAA,QAAQ,EAARA;AAJK,GAAP;AAMD;;;AAED,eAAe,SAASC,IAAT,OAAwB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACrC,MAAMC,MAAM,GAAGtB,SAAS,EAAxB;;AAEA,MAAI,CAACsB,MAAM,CAACC,UAAR,IAAsB,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,IAAP,CAA1B,EAAuC;AACrC,WAAO,MAAC,SAAD;AAAW,MAAA,UAAU,EAAE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAMT,OAAO,GAAGD,QAAQ,CAACO,IAAI,CAACI,WAAN,CAAxB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGO,MAAM,CAACC,UAAP,GACC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,GAGC,4BACE;AAAS,IAAA,SAAS,EAAC,8BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACO,KADR,mCAC4ChB,QAD5C,CADF,CADF,EAME,MAAC,UAAD;AACE,IAAA,KAAK,EAAES,IAAI,CAACO,KADd;AAEE,IAAA,UAAU,EAAEP,IAAI,CAACQ,UAFnB;AAGE,IAAA,IAAI,EAAER,IAAI,CAACS,SAHb;AAIE,IAAA,MAAM,EAAET,IAAI,CAACU,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAYE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEV,IAAI,CAACI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF,EAeE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CALJ,CADF,CADF;AA4BD","sourcesContent":["import { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport readTimeEstimate from \"read-time-estimate\";\nimport Container from \"../../components/container\";\nimport PostBody from \"../../components/post-body\";\nimport MoreStories from \"../../components/more-stories\";\nimport Header from \"../../components/header\";\nimport PostHeader from \"../../components/post-header\";\nimport SectionSeparator from \"../../components/section-separator\";\nimport Layout from \"../../components/layout\";\nimport { getPostDataById, getAllPostsWithId } from \"../../lib/api\";\nimport PostTitle from \"../../components/post-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\nimport markdownToHtml from \"../../lib/markdownToHtml\";\n\nfunction readTime(content) {\n  const {\n    humanizedDuration,\n    duration,\n    totalWords,\n    wordTime\n  } = readTimeEstimate(content);\n\n  return {\n    humanizedDuration,\n    duration,\n    totalWords,\n    wordTime\n  };\n}\n\nexport default function Post({ post }) {\n  const router = useRouter();\n\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n\n  const content = readTime(post.postContent);\n\n  console.log(content);\n\n  return (\n    <Layout>\n      <Container>\n        <Header />\n        {router.isFallback ? (\n          <PostTitle>Loadingâ€¦</PostTitle>\n        ) : (\n          <>\n            <article className=\"flex flex-col justify-center\">\n              <Head>\n                <title>\n                  {post.title} | Next.js Blog Example with {CMS_NAME}\n                </title>\n              </Head>\n              <PostHeader\n                title={post.title}\n                coverImage={post.coverImage}\n                date={post.createdAt}\n                author={post.author}\n              />\n              <PostBody content={post.postContent} />\n            </article>\n            <SectionSeparator />\n          </>\n        )}\n      </Container>\n    </Layout>\n  );\n}\n\nexport async function getStaticPaths() {\n  const allPosts = await getAllPostsWithId();\n  const paths = allPosts?.map(post => `/posts/${post.id}`);\n\n  return {\n    paths,\n    fallback: true\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  const data = await getPostDataById(params.id);\n\n  return {\n    props: {\n      post: {\n        ...data?.content[0]\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}